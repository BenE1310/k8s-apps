apiVersion: v1
kind: Namespace
metadata:
  name: storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: upload-service
  namespace: storage
  labels:
    app: upload-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: upload-service
  template:
    metadata:
      labels:
        app: upload-service
    spec:
      containers:
      - name: upload-service
        image: node:18-alpine
        ports:
        - containerPort: 3000
        workingDir: /app
        command:
        - sh
        - -c
        - |
          echo '{"name":"upload-service","version":"1.0.0","main":"server.js","dependencies":{"express":"^4.18.2","multer":"^1.4.5-lts.1","minio":"^7.1.1","cors":"^2.8.5"}}' > package.json
          npm install
          node server.js
        volumeMounts:
        - name: app-code
          mountPath: /app
        env:
        - name: MINIO_ENDPOINT
          value: "YOUR_K3S_NODE_IP"  # Replace with your K3s node IP
        - name: MINIO_PORT
          value: "30900"  # NodePort for MinIO API
        - name: MINIO_ACCESS_KEY
          value: "admin"
        - name: MINIO_SECRET_KEY
          value: "password123"
        - name: MINIO_BUCKET
          value: "profile-images"
      volumes:
      - name: app-code
        configMap:
          name: upload-service-config
---
apiVersion: v1
kind: Service
metadata:
  name: upload-service
  namespace: storage
spec:
  selector:
    app: upload-service
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30300
  type: NodePort
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: upload-service-config
  namespace: storage
data:
  server.js: |
    const express = require('express');
    const multer = require('multer');
    const Minio = require('minio');
    const cors = require('cors');

    const app = express();
    app.use(cors());
    app.use(express.json());

    console.log('Starting upload service...');
    console.log('MinIO Endpoint:', process.env.MINIO_ENDPOINT);
    console.log('MinIO Port:', process.env.MINIO_PORT);

    // Configure MinIO client
    const minioClient = new Minio.Client({
      endPoint: process.env.MINIO_ENDPOINT,
      port: parseInt(process.env.MINIO_PORT),
      useSSL: false,
      accessKey: process.env.MINIO_ACCESS_KEY,
      secretKey: process.env.MINIO_SECRET_KEY
    });

    const bucketName = process.env.MINIO_BUCKET;

    // Ensure bucket exists
    minioClient.makeBucket(bucketName, 'us-east-1', function(err) {
      if (err) {
        console.log('Bucket already exists.');
      } else {
        console.log('Bucket created successfully.');
      }
    });

    // Configure multer for memory storage
    const upload = multer({
      storage: multer.memoryStorage(),
      limits: {
        fileSize: 5 * 1024 * 1024 // 5MB limit
      }
    });

    // Health check endpoint
    app.get('/health', (req, res) => {
      res.json({ status: 'OK', timestamp: new Date().toISOString() });
    });

    // Upload endpoint
    app.post('/upload', upload.single('image'), async (req, res) => {
      try {
        console.log('Upload request received');
        if (!req.file) {
          return res.status(400).json({ error: 'No file uploaded' });
        }

        const fileName = `profile_${Date.now()}_${Math.random().toString(36).substring(7)}.jpg`;
        console.log('Uploading file:', fileName);
        
        // Upload to MinIO
        await minioClient.putObject(
          bucketName,
          fileName,
          req.file.buffer,
          req.file.size,
          { 'Content-Type': req.file.mimetype }
        );

        console.log('File uploaded successfully');
        res.json({ 
          success: true, 
          filename: fileName,
          url: `http://${process.env.MINIO_ENDPOINT}:${process.env.MINIO_PORT}/${bucketName}/${fileName}`
        });
      } catch (error) {
        console.error('Upload error:', error);
        res.status(500).json({ error: 'Upload failed', details: error.message });
      }
    });

    // Get image endpoint
    app.get('/images/:filename', async (req, res) => {
      try {
        const fileName = req.params.filename;
        console.log('Downloading file:', fileName);
        const stream = await minioClient.getObject(bucketName, fileName);
        res.setHeader('Content-Type', 'image/jpeg');
        stream.pipe(res);
      } catch (error) {
        console.error('Download error:', error);
        res.status(404).json({ error: 'Image not found' });
      }
    });

    // Delete image endpoint
    app.delete('/images/:filename', async (req, res) => {
      try {
        const fileName = req.params.filename;
        console.log('Deleting file:', fileName);
        await minioClient.removeObject(bucketName, fileName);
        res.json({ success: true });
      } catch (error) {
        console.error('Delete error:', error);
        res.status(500).json({ error: 'Delete failed' });
      }
    });

    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
      console.log(`Upload service running on port ${PORT}`);
    }); 